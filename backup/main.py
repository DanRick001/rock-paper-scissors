# - *- coding: utf- 8 - *-
import asyncio
import requests
import DBcontrol

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, ContentType

from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware

TOKEN = '5510764755:AAEgrVbJG3PTB6qkhUd7Bdq_xlOiMblWRkw'
OWNER_ID = ["1194880448", "1285111166"]

for chat_id in OWNER_ID:
    requests.post(f"https://api.telegram.org/bot{TOKEN}/sendMessage?chat_id={chat_id}&text=In developing") #Online message

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

#—Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—ã–µ "–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

#—Å–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class States(Helper):
    mode = HelperMode.snake_case
    ANSWER_ON_MESSAGE_1 = ListItem()

#print(States.all())

async def check_data(username, ref_check=None):
    data = await asyncio.ensure_future(DBcontrol.get_data(username))
    if data == False:
        reg_data = await asyncio.ensure_future(DBcontrol.reg(username, ref_check))
        if reg_data == True:
            data = await asyncio.ensure_future(DBcontrol.get_data(username))
            return data
    else:
        return data

@dp.message_handler(state=States.ANSWER_ON_MESSAGE_1)
async def referal_state(message: types.Message):
    referal_username = message.text.split(' ')[0]
    message_username = message.from_user.username
    state = dp.current_state(user=message.from_user.id)
    if '@' in referal_username:
        referal_username = referal_username.replace('@', '')

    if message_username != referal_username:
        if await asyncio.ensure_future(DBcontrol.reg(referal_username, True, message_username)) == 1:
            await message.reply('–í–∞—Å –ø—Ä–µ–≥–ª–∞—Å–∏–ª: ' + referal_username, reply=False)
            await state.reset_state()
            await asyncio.ensure_future(profile(message))
        elif message.text == '-':
            await state.reset_state()
            await asyncio.ensure_future(profile(message))

        else:
            await message.reply('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞!', reply=False)
    else:
        await message.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π —é–∑–µ—Ä–Ω–µ–π–º!', reply=False)

@dp.message_handler(state='*', commands=['start'], commands_prefix='/')
async def start(message: types.Message):
    username = message.from_user.username
    data = await asyncio.ensure_future(DBcontrol.get_data(username))
    if data == False:
        data = await asyncio.ensure_future(check_data(username))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ(–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ \"-\"): ')
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(States.all()[0]) #—Å–æ–∑–¥–∞—ë–º —Å—Ç–µ–π—Ç

    else:
        await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')

@dp.message_handler(commands=['profile'], commands_prefix='/') #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–∞–Ω–¥—ã /profile
async def profile(message: types.Message):
    username = message.from_user.username
    data = await asyncio.ensure_future(check_data(username))
    if data != False:
        topUP_button = KeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
        withdraw_button = KeyboardButton('–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏')
        info_button = KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        #markup3 = ReplyKeyboardMarkup().add(button1).add(button2).add(button3)
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True) #–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫
        keyboard.add(topUP_button, withdraw_button) #–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
        keyboard.row(info_button) #–∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–µ

        await message.reply(f'üë§–ò–º—è: {username}\nü§ë–ë–∞–ª–∞–Ω—Å: {data[0]}\n‚úèÔ∏è–ò—Å—Ç–æ—Ä–∏—è: {data[1]}\nü§ñ–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {data[2]}\nüì£–í–∞—Å –ø—Ä–µ–≥–ª–∞—Å–∏–ª: {data[3]}', reply_markup=keyboard)

@dp.message_handler() #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤—ã—à–µ
async def commands(message: types.Message):
    text = message.text.lower()
    username = message.from_user.username
    if text == '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        await message.answer('some information')

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True) #–°—Ç–∞—Ä—Ç—É–µ–º –±–æ—Ç–∞.