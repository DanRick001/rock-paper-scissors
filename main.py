# - *- coding: utf- 8 - *-
import asyncio
import requests
import DBcontrol
import random

from SimpleQIWI import *

from pyqiwip2p import QiwiP2P
from pyqiwip2p.p2p_types import QiwiCustomer, QiwiDatetime

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, ContentType

from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils.callback_data import CallbackData

TOKEN = '5510764755:AAEgrVbJG3PTB6qkhUd7Bdq_xlOiMblWRkw'
OWNER_ID = ["1194880448", "1285111166"]

#token_QIWI = 'd46b523a448ab2a646f182ddefd6f775'
token_QIWI = '98c478d0d4601f5ab7b8abfdda46b1ab'
authKey_QIWI = 'eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6InNpdjFvai0wMCIsInVzZXJfaWQiOiI3OTE5MTQyMDk2MyIsInNlY3JldCI6ImVjY2E5MDUxNWUxZjUyYzY4MGEzNGMyZDQwZWNiZmVjOWVmY2EzODVhYjUyMmQ0NjdiNDAzZDM0YzU2MTgwMzgifX0='
my_phone = '+79191420963'
p2p = QiwiP2P(auth_key=authKey_QIWI) #–°–µ—Å—Å–∏—è QIWI

qiwi_api = QApi(token=token_QIWI, phone=my_phone)
#print(qiwi_api.balance)

for chat_id in OWNER_ID:
    requests.post(f"https://api.telegram.org/bot{TOKEN}/sendMessage?chat_id={chat_id}&text=In developing") #Online message

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
global amount
#—Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—ã–µ "–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
vote_cb = CallbackData('vote', "action", "user_id", "chat_id")

###############################################################################################################################################################################
rooms = {}

inline_btn_1 = InlineKeyboardButton('–ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞!', callback_data='button1')
inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1)
###############################################################################################################################################################################

#—Å–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class States(Helper):
    mode = HelperMode.snake_case

    AMOUNT_TOP_DOWN_3 = ListItem()
    ANSWER_ON_MESSAGE_1 = ListItem()
    AMOUNT_TOP_UP_2 = ListItem()

print(States.all())

async def pay_check(new_bill, username, amount, chat_id):
    while True:
        await asyncio.sleep(0.0001)
        print(username, p2p.check(bill_id=new_bill.bill_id).status)
        if p2p.check(bill_id=new_bill.bill_id).status == 'PAID':
            p2p.reject(bill_id=new_bill.bill_id)
            await asyncio.ensure_future(DBcontrol.top_up(username, amount))
            await bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!üíú")
            return
            break
        if p2p.check(bill_id=new_bill.bill_id).status == 'REJECTED':
            await bot.send_message(chat_id, "–£—Å–ø–µ—à–Ω–æ!üòÉ –í–∞—à —Å—á—ë—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç.")
            return

async def check_data(username, ref_check=None):
    data = await asyncio.ensure_future(DBcontrol.get_data(username))
    if data == False:
        reg_data = await asyncio.ensure_future(DBcontrol.reg(username, ref_check))
        if reg_data == True:
            data = await asyncio.ensure_future(DBcontrol.get_data(username))
            return data
    else:
        return data

@dp.message_handler(state=States.ANSWER_ON_MESSAGE_1)
async def referal_state(message: types.Message):
    referal_username = message.text.split(' ')[0]
    message_username = message.from_user.username
    state = dp.current_state(user=message.from_user.id)
    if '@' in referal_username:
        referal_username = referal_username.replace('@', '')

    if message_username != referal_username:
        if await asyncio.ensure_future(DBcontrol.reg(referal_username, True, message_username)) == 1:
            await message.reply('–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: ' + referal_username, reply=False)
            await state.reset_state()
            await asyncio.ensure_future(profile(message))
        elif message.text == '-':
            await state.reset_state()
            await asyncio.ensure_future(profile(message))

        else:
            await message.reply('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞!', reply=False)
    else:
        await message.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π —é–∑–µ—Ä–Ω–µ–π–º!', reply=False)

@dp.message_handler(state='*', commands=['start'], commands_prefix='/')
async def start(message: types.Message):
    username = message.from_user.username
    data = await asyncio.ensure_future(DBcontrol.get_data(username))
    if data == False:
        data = await asyncio.ensure_future(check_data(username))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ(–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ \"-\"): ')
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(States.all()[2]) #—Å–æ–∑–¥–∞—ë–º —Å—Ç–µ–π—Ç

    else:
        await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')

@dp.message_handler(commands=['profile'], commands_prefix='/') #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–∞–Ω–¥—ã /profile
async def profile(message: types.Message):
    username = message.from_user.username
    data = await asyncio.ensure_future(check_data(username))
    if data != False:
        topUP_button = KeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
        withdraw_button = KeyboardButton('–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏')
        info_button = KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        #markup3 = ReplyKeyboardMarkup().add(button1).add(button2).add(button3)
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True) #–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫
        keyboard.add(topUP_button, withdraw_button) #–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
        keyboard.row(info_button) #–∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–µ

        await message.reply(f'üë§–ò–º—è: {username}\nü§ë–ë–∞–ª–∞–Ω—Å: {data[0]}\n‚úèÔ∏è–ò—Å—Ç–æ—Ä–∏—è: {data[1]}\nü§ñ–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {data[2]}\nüì£–í–∞—Å –ø—Ä–µ–≥–ª–∞—Å–∏–ª: {data[3]}', reply_markup=keyboard)

###############################################################################################################################################################################
@dp.message_handler(commands=['create_room'], commands_prefix='/') #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–∞–Ω–¥—ã /create_room
async def create_new_room(message: types.Message):
    try:
        username = message.from_user.username
        data = await asyncio.ensure_future(check_data(username))
        #rooms[username] = random.randint(96, 100)
        rooms[username] = int(message.text[13:])
        await message.answer(f"–°—Ç–∞–≤–∫–∞ –Ω–∞ {rooms[username]} —Ä—É–±. —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        print(rooms)
    except:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")

@dp.message_handler(commands=['find_room'], commands_prefix='/') #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–∞–Ω–¥—ã /find_room
async def find_room(message: types.Message):
    username = message.from_user.username
    data = await asyncio.ensure_future(check_data(username))
    try:
        amount = int(message.text[11:])
    #await message.answer(amount)
        people=[]
        for i in rooms.items():
            for j in range(-10, 10):
                if i[1] == j + amount :#and username != i[0]
                    people.append(i)
        room_creator_id = str(people[random.randint(0, len(people)-1)][0])
        amount = int(people[random.randint(0, len(people)-1)][1])
        await message.answer(f'–í—ã –∏–≥—Ä–∞–µ—Ç–µ —Å {room_creator_id}. –°—Ç–∞–≤–∫–∞: {amount} —Ä—É–±.')
        #print(people[random.randint(0, len(people)-1)])

    except:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")

###############################################################################################################################################################################

@dp.message_handler(state=States.AMOUNT_TOP_UP_2)
async def amount_topUP(message: types.Message):
    username = message.from_user.username
    chat_id = message.chat.id
    amount = int(message.text)
    state = dp.current_state(user=message.from_user.id)
    new_bill = p2p.bill(bill_id=random.randint(111111111,999999999), amount=amount, lifetime=15)

    keyboard = InlineKeyboardMarkup(row_with=2)
    keyboard.add(InlineKeyboardButton('‚úÖ–û–ø–ª–∞—Ç–∏—Ç—å', url=new_bill.pay_url))
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ', reply_markup=keyboard)
    asyncio.ensure_future(pay_check(new_bill, username, amount, chat_id))
    await state.reset_state()

@dp.message_handler(state=States.AMOUNT_TOP_DOWN_3)
async def amount_topDOWN(message: types.Message):
    try:
        data = await asyncio.ensure_future(check_data(username))
        username = message.from_user.username
        text = message.text.split(' ')
        phone_number = text[0]
        amount = int(text[1])
        if data[0] >= amount:
            state = dp.current_state(user=message.from_user.id)
            qiwi_api.pay(account=phone_number, amount=amount, comment='RPS_stavka')
            await message.answer('–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–∏–∑–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ!')
        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.')
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')

    await state.reset_state()

@dp.callback_query_handler(vote_cb.filter(action='qiwi_up'))
async def qiwi_up_callback(query: types.CallbackQuery, callback_data: dict):
    user_id = callback_data['user_id']
    chat_id = callback_data['chat_id']
    await bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è(–±–µ–∑ –∑—è–ø—è—Ç—ã—Ö –∏ —Ç–æ—á–µ–∫)')
    state = dp.current_state(user=user_id)
    await state.set_state(States.all()[1]) #—Å–æ–∑–¥–∞—ë–º —Å—Ç–µ–π—Ç

@dp.callback_query_handler(vote_cb.filter(action='qiwi_down'))
async def qiwi_down_callback_amount(query: types.CallbackQuery, callback_data: dict):
    user_id = callback_data['user_id']
    chat_id = callback_data['chat_id']
    await bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–ª–µ–¥—É—â–µ–≥–æ –≤–∏–¥–∞(–±–µ–∑ —Å–∫–æ–±–æ–∫): –ù–û–ú–ï–†_–¢–ï–õ–ï–§–û–ù–ê(–≤ –≤–∏–¥–µ +79000000000) –°–£–ú–ú–ê_–í–´–í–û–î–ê\n–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ, —Ç–æ –º—ã –Ω–µ –Ω–µ—Å—ë–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏!')
    state = dp.current_state(user=user_id)
    await state.set_state(States.all()[0]) #—Å–æ–∑–¥–∞—ë–º —Å—Ç–µ–π—Ç

@dp.message_handler(state='*') #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤—ã—à–µ
async def keyboard_commands(message: types.Message):
    text = message.text.lower()
    username = message.from_user.username
    if text == '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        await message.answer('some information')

    elif text == '–ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å':
        keyboard = InlineKeyboardMarkup(row_with=2)
        qiwi_button = InlineKeyboardButton('QIWIü•ù', callback_data=vote_cb.new(action='qiwi_up', user_id=message.from_user.id, chat_id=message.chat.id))
        keyboard.add(qiwi_button)
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ', reply_markup=keyboard)

    elif text == '–≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏':
        keyboard = InlineKeyboardMarkup(row_with=2)
        qiwi_button = InlineKeyboardButton('QIWIü•ù', callback_data=vote_cb.new(action='qiwi_down', user_id=message.from_user.id, chat_id=message.chat.id))
        keyboard.add(qiwi_button)
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞ –¥–µ–Ω–µ–≥: ', reply_markup=keyboard)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True) #–°—Ç–∞—Ä—Ç—É–µ–º –±–æ—Ç–∞.